- name: configure auth server service
  tags: [auth]
  template: src=auth.conf.j2
            dest=/etc/init/auth.conf
            owner=root group=root mode=0644
  register: auth_service

- name: checkout auth server
  tags: [auth]
  sudo_user: "{{username}}"
  git: repo={{auth_server_repo}}
       version={{auth_server_branch}}
       dest={{install_dir}}/openid-connect-server
  register: auth_checkout
  
- name: checkout auth ldap server
  tags: [auth]
  sudo_user: "{{username}}"
  git: repo={{auth_ldap_server_repo}}
       version={{auth_ldap_server_branch}}
       dest={{install_dir}}/ldap-openid-connect-server
  register: auth_ldap_checkout
  
- name: stop auth server
  tags: [auth]
  when: auth_checkout.changed or auth_ldap_checkout.changed
  service: name=auth state=stopped

- name: clear auth server data
  tags: [auth]
  file: path={{auth_server_db_file}} state=absent
  when: not auth_server_preserve_db

# TODO should probably configure the data-context in the overlay project 
# instead of configuring on-the-floy here. (When the overlay is working.)
- name: disable memory-hsql
  lineinfile:
    dest={{auth_server_data_context}}
    regexp="hsqldb:mem"
    line='<!-- <property name="url" value="jdbc:hsqldb:mem:oic;sql.syntax_mys=true" /> -->'

- name: enable file-hsql
  lineinfile:
    dest={{auth_server_data_context}}
   regexp="hsqldb:file"
   line='<property name="url" value="jdbc:hsqldb:file:{{auth_server_db_file}};sql.syntax_mys=true" />'

- name: build auth server
  tags: [auth]
  sudo_user: "{{username}}"
  when: auth_checkout.changed
  environment:
    JAVA_HOME: "{{java_home_dir}}"
  shell: chdir={{install_dir}}/openid-connect-server
       mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true
       
- name: build auth ldap overlay
  tags: [auth]
  sudo_user: "{{username}}"
  when: auth_ldap_checkout.changed
  environment:
    JAVA_HOME: "{{java_home_dir}}"
  shell: chdir={{install_dir}}/ldap-openid-connect-server
       mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true

- name: restart auth server
  tags: [auth]
  when: auth_checkout.changed or auth_service.changed or auth_ldap_checkout.changed
  service: name=oidc state=restarted

- name: wait for auth server to become available
  tags: [auth]
  wait_for: port=4000

- name: generate self-signed ssl certificate (auth server)
  tags: [auth,nginx]
  when: auth_server_secure_http and not use_custom_ssl_certificates
  shell: creates=/etc/nginx/ssl/auth.crt
         echo -e "{{auth_server_ssl_country}}\n{{auth_server_ssl_province}}\n{{auth_server_ssl_locality}}\n{{auth_server_ssl_organization}}\n{{auth_server_ssl_division}}\n{{auth_server_host}}\n{{auth_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/auth.key -out /etc/nginx/ssl/auth.crt
  
- name: configure nginx (auth server)
  tags: [auth,nginx]
  template: src=nginx_auth.j2 dest=/etc/nginx/sites-enabled/auth owner=root group=root mode=0644
  notify:
        - restart nginx

- meta: flush_handlers
