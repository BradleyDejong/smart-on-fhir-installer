- name: check host:port uniqueness
  fail: msg="each server must have unique host:port assigned"
  when: "'{{auth_server_host}}:{{auth_server_port}}' == '{{fhir_server_host}}:{{fhir_server_port}}' or '{{auth_server_host}}:{{auth_server_port}}' == '{{app_server_host}}:{{app_server_port}}' or '{{fhir_server_host}}:{{fhir_server_port}}' == '{{app_server_host}}:{{app_server_port}}'"

- name: create group
  group: name="{{username}}"
  
- name: create user
  user: name="{{username}}" password="{{userpass}}"
        group="{{username}}" groups=sudo
        shell=/bin/bash

- name: add PPA repos
  apt_repository: repo={{item}}
  with_items: ['ppa:webupd8team/java','ppa:nginx/stable']

- name: update aptitude cache 
  apt: update_cache=yes
  
- name: upgrade server packages
  apt: upgrade=full
  
- name: install prerequisite packages
  environment:
    DEBIAN_FRONTEND: noninteractive
  apt: pkg={{item}} force=yes
  with_items:
         - git
         - nginx
         - maven
         - postgresql
         - python-psycopg2
         - python-jinja2

- name: automatically select the Oracle License
  shell: echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections

- name: install Oracle Java
  apt: pkg=oracle-java7-installer

- name: set global JAVA_HOME
  lineinfile: dest=/etc/environment
              state=present
              regexp='^JAVA_HOME'
              line='JAVA_HOME={{java_home_dir}}'

- name: download jetty-runner
  tags: [apps]
  sudo_user: "{{username}}"
  get_url: 
          url={{jetty_download_url}}
          dest={{install_dir}}/jetty-runner.jar

- name: create ssl certificates directory
  when: auth_server_secure_http or fhir_server_secure_http or app_server_secure_http
  file: path=/etc/nginx/ssl state=directory owner=root group=root mode=0640

- name: generate self-signed ssl certificates (auth server)
  when: auth_server_secure_http
  shell: echo -e "{{auth_server_ssl_country}}\n{{auth_server_ssl_province}}\n{{auth_server_ssl_locality}}\n{{auth_server_ssl_organization}}\n{{auth_server_ssl_division}}\n{{auth_server_host}}\n{{auth_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/auth.key -out /etc/nginx/ssl/auth.crt

- name: generate self-signed ssl certificates (fhir server)
  when: fhir_server_secure_http
  shell: echo -e "{{fhir_server_ssl_country}}\n{{fhir_server_ssl_province}}\n{{fhir_server_ssl_locality}}\n{{fhir_server_ssl_organization}}\n{{fhir_server_ssl_division}}\n{{fhir_server_host}}\n{{fhir_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/fhir.key -out /etc/nginx/ssl/fhir.crt

- name: generate self-signed ssl certificates (apps server)
  when: app_server_secure_http
  shell: echo -e "{{app_server_ssl_country}}\n{{app_server_ssl_province}}\n{{app_server_ssl_locality}}\n{{app_server_ssl_organization}}\n{{app_server_ssl_division}}\n{{app_server_host}}\n{{app_server_ssl_email}}\n" | openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/fhir.key -out /etc/nginx/ssl/fhir.crt
 
- include: ldap.yml
- include: smart-on-fhir.yml
- include: auth-server.yml
- include: sample-data.yml