- name: check host:port uniqueness
  tags: [general]
  fail: msg="each server must have unique host:port assigned"
  when: "'{{auth_server_host}}:{{auth_server_port}}' == '{{fhir_server_host}}:{{fhir_server_port}}' or '{{auth_server_host}}:{{auth_server_port}}' == '{{app_server_host}}:{{app_server_port}}' or '{{fhir_server_host}}:{{fhir_server_port}}' == '{{app_server_host}}:{{app_server_port}}'"

- name: install prerequisite packages
  tags: [general]
  environment:
    DEBIAN_FRONTEND: noninteractive
  apt: pkg={{item}} force=yes
  with_items:
         - git
         - nginx
         - maven
         - curl
         - postgresql
         - python-psycopg2
         - python-jinja2
         - python-httplib2
         - python-requests
         - python-pycurl

- name: create group
  tags: [general]
  group: name="{{username}}"
  
- name: create user
  tags: [general]
  user: name="{{username}}" password="{{userpass}}" update_password="on_create"
        group="{{username}}" groups=sudo
        shell=/bin/bash

- name: add PPA repos
  tags: [general]
  apt_repository: repo={{item}}
  with_items: ['ppa:webupd8team/java','ppa:nginx/stable']

- name: update aptitude cache
  tags: [general]
  apt: update_cache=yes
  
- name: upgrade server packages
  tags: [general]
  apt: upgrade=full
  
- name: automatically select the Oracle License
  tags: [general]
  shell: /bin/echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections

- name: install Oracle Java
  tags: [general]
  apt: pkg=oracle-java7-installer

- name: set global JAVA_HOME
  tags: [general]
  lineinfile: dest=/etc/environment
              state=present
              regexp='^JAVA_HOME'
              line='JAVA_HOME={{java_home_dir}}'

- name: download jetty-runner
  tags: [apps, general]
  sudo_user: "{{username}}"
  get_url: 
          url={{jetty_download_url}}
          dest={{install_dir}}/jetty-runner.jar

- name: config jetty-runner
  tags: [apps, general]
  copy: src=jetty.xml dest={{install_dir}}/jetty.xml

- name: create ssl certificates directory
  tags: [general]
  when: auth_server_secure_http or fhir_server_secure_http or app_server_secure_http
  file: path=/etc/nginx/ssl state=directory owner=root group=root mode=0640
  
- name: copy custom ssl certificates
  tags: [general]
  when: (auth_server_secure_http or fhir_server_secure_http or app_server_secure_http) and use_custom_ssl_certificates
  copy: src={{custom_ssl_certificates_path|default('examples/certificates')}}/
        dest=/etc/nginx/ssl
        
- name: add www-data user to ssl-cert group
  tags: [general]
  when: (auth_server_secure_http or fhir_server_secure_http or app_server_secure_http) and use_custom_ssl_certificates
  user: name=www-data groups=ssl-cert
        
- name: set private key permissions
  tags: [general]
  when: (auth_server_secure_http or fhir_server_secure_http or app_server_secure_http) and use_custom_ssl_certificates
  file: path=/etc/ldap/ssl/*.key group=ssl-cert mode=640
        
- name: clear truststore
  tags: [general]
  file: name={{install_dir}}/keystore state=absent
  
- name: initialize truststore
  tags: [general]
  sudo_user: "{{username}}"
  when: (ldap_server_tls or auth_server_secure_http or fhir_server_secure_http or app_server_secure_http) and not use_custom_ssl_certificates
  shell: /bin/echo -e "{{keystore_password}}\n{{keystore_password}}\n\n\n\n\n\n\nyes\n" | keytool
           -genkey -alias foo
           -keystore {{install_dir}}/keystore

- name: request http server restart
  when: force_rebuild
  command: echo
  notify:
        - restart nginx
 
- include: ldap.yml
- include: smart-on-fhir.yml
- include: auth-server.yml
- include: sample-data.yml
