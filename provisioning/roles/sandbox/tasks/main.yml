- name: stop nginx
  service: name=nginx state=stopped

- name: install prerequisite packages
  tags: [general]
  environment:
    DEBIAN_FRONTEND: noninteractive
  apt: pkg={{item}} force=yes
  with_items:
       - apache2
       - python-pip
       - libapache2-mod-wsgi

- name: copy login.jsp
  tags: [auth]
  sudo_user: "{{username}}"
  copy: src=auth-server/openid-connect-server-webapp/src/main/webapp/WEB-INF/views/login.jsp
        dest={{install_dir}}/auth-server/openid-connect-server-webapp/src/main/webapp/WEB-INF/views/
  register: auth_config_1
        
- name: copy DefaultOIDCTokenService.java
  tags: [auth]
  sudo_user: "{{username}}"
  copy: src=auth-server/openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/DefaultOIDCTokenService.java
        dest={{install_dir}}/auth-server/openid-connect-server/src/main/java/org/mitre/openid/connect/service/impl/
  register: auth_config_2

- name: build auth server
  tags: [auth]
  sudo_user: "{{username}}"
  when: auth_config_1.changed or auth_config_2.changed
  environment:
    JAVA_HOME: "{{java_home_dir}}"
  shell: chdir={{install_dir}}/auth-server
       mvn clean install -DskipTests=true -Dmaven.javadoc.skip=true

- name: build auth ldap overlay
  tags: [auth]
  sudo_user: "{{username}}"
  when: auth_config_1.changed or auth_config_2.changed
  environment:
    JAVA_HOME: "{{java_home_dir}}"
  shell: chdir={{install_dir}}/auth-server-ldap
       mvn clean package -DskipTests=true -Dmaven.javadoc.skip=true

- name: restart auth server
  tags: [auth]
  when: auth_config_1.changed or auth_config_2.changed
  service: name=auth-server state=restarted

- name: wait for auth server to become available
  tags: [auth]
  when: auth_config_1.changed or auth_config_2.changed
  wait_for: port=4000
  
- name: checkout disease monograph app
  tags: [apps]
  sudo_user: "{{username}}"
  git: repo={{disease_monograph_repo}}
       version={{disease_monograph_branch}}
       dest={{install_dir}}/apps/static/apps/disease-monograph
       update={{update_repositories}}

- name: checkout diabetes monograph app
  tags: [apps]
  sudo_user: "{{username}}"
  git: repo={{diabetes_monograph_repo}}
       version={{diabetes_monograph_branch}}
       dest={{install_dir}}/apps/static/apps/diabetes-monograph
       update={{update_repositories}}
  
- name: checkout mpr monitor app
  tags: [apps]
  sudo_user: "{{username}}"
  git: repo={{mpr_monitor_repo}}
       version={{mpr_monitor_branch}}
       dest={{install_dir}}/apps/rest/mpr_monitor
       update={{update_repositories}}

- name: configure mpr monitor (step 1)
  tags: [apps]
  sudo_user: "{{username}}"
  shell: sed -i -e 's/my_web_app/{{ mpr_monitor_client_id | regex_replace('/', '\\/') }}/' {{install_dir}}/apps/rest/mpr_monitor/settings.py
  
- name: configure mpr monitor (step 2)
  tags: [apps]
  sudo_user: "{{username}}"
  shell: sed -i -e 's/http:\/\/localhost:8000/{{ mpr_monitor_base | regex_replace('/', '\\/') }}/' {{install_dir}}/apps/rest/mpr_monitor/settings.py
  
- name: install pip prerequisites to mpr monitor
  tags: [apps]
  pip: requirements={{install_dir}}/apps/rest/mpr_monitor/requirements.txt

- name: configure apache (remove default server)
  tags: [apps]
  file: path=/etc/apache2/sites-enabled/000-default.conf state=absent
  
- name: configure apache (mpr monitor server)
  tags: [apps]
  template: src=mpr-monitor.conf.j2 dest=/etc/apache2/sites-enabled/mpr-monitor.conf owner=root group=root mode=0644
  
- name: configure nginx (mpr monitor server)
  tags: [apps]
  template: src=nginx_mprmonitor.j2 dest=/etc/nginx/sites-enabled/mprmonitor owner=root group=root mode=0644
  
- name: restart apache2
  service: name=apache2 state=restarted  

- name: restart nginx
  service: name=nginx state=restarted